* Not copying directly to target: because it is unclear whether the file was
  installed by coffle and later modified
* no unescaped names in processing directories: so we can use dotfiles for
  bookkeeping

== Directories

On directories:
* If the target of a directory entry already exists, we use it and keep its contents.
** coffle directores are the same as other directories
** we want to keep, for example, .ssh/identity when installing .ssh/config
* We accept a symlink to a directory as existing target directory

For now, we don't allow overwriting a file with a directory or vice versa.
We never make a backup of a directory (cannot be overwritten by a file
(refused) nor a directory (exists)).

Notes on backups of directories (in case we want to make them one day):
* Can we/do we have to distinguish a file backup in a directory from a
  directory backup?
* What about uninstalling directories that contain non-coffle entries?



== Skipping

Skipped means:
* not under coffle control (on this machine)
* act as if the entry didn't exist
* do not install the file
* if the file is already installed, uninstall it

Notes:
* We do not want to rebuild a skipped entry if the source has not changed.
  However, we need to build an entry that is not yet built. Both "skipped" and
  "not built" have no existing output file. In order to distinguish between
  these two states, a "skipped" property is required.
* The "skipped" property could be stored in a status file or as tag files.  In
* order to determine when to rebuild a skipped entry, a timestamp is required
  for skipped files as well as for built entries.
* If the skipped property is not present, it is treated as false.
* If skipped is false and the output does not exist, the entry is treated as
  not yet built and is rebuilt.
* If skipped is true, but the output exists, the entry is inconsistent and is
  rebuilt.
* After building, the skipped property is updated.
* The skipped flag (also the built status) is only meaningful if the entry is
  current.

Open questions:
* Is it better to also use the timestamp in the build file for built entries
  rather than the timetamp of the output/org file?
  
With skipped property:
built? |skipped? |meaning         |build condition
-------+---------+----------------+------------
false  |false    |not built       |always
false  |true     |regular skipped |source newer than timestamp
true   |false    |regular built   |source newer than org (or timestamp)
true   |true     |inconsistent    |always



== Backups

Goals:
* install (even with --overwrite) followed by uninstall => same as before

Conclusions:
* The only reason to use multiple backups would be to allow the user to replace
  the the installed entries. However, this is probably neither easy nor simple.
  Therefore, we only use a single backup.
* If on "install" the backup is present and the target is "none" or "other", we
  may not keep the backup because after "uninstall", we would have restored an
  old backup. We also do not want to silently drop the backup after the user
  deletes the coffle link. Thus, we have to refuse.


== Install

type      |target    |backup  |overwrite ||backup action |target action |comments
----------+----------+--------+----------++--------------+--------------+-------------------
*         |installed |*       |*         ||-             |-             |already current
----------+----------+--------+----------++--------------+--------------+-------------------
*         |none      |present |*         ||            refuse           |target was removed
*         |wrong     |present |*         ||            refuse           |target was replaced
----------+----------+--------+----------++--------------+--------------+-------------------
*         |none      |none    |*         ||-             |install       |regular install
----------+----------+--------+----------++--------------+--------------+-------------------
file      |dir       |none    |*         ||            refuse           |file blocked by dir
dir       |file      |none    |*         ||            refuse           |dir blocked by file
file      |file      |none    |false     ||-             |-             |not overwriting
file      |file      |none    |true      ||make          |install       |overwriting install

Note:
* For directory entries, there is no overwriting install, since an existing
  directory will be treated as target=installed
* removed and replaced is only detected when there is a backup, which is never
  the case for directory entries.


== Uninstall

target    |backup  ||target action |backup action |comments
----------+--------++--------------+--------------+-------------------------------------
installed |present ||restore       |remove        |regular uninstall with restore
installed |none    ||remove        |-             |regular uninstall without restore
----------+--------++--------------+--------------+-------------------------------------
none      |present ||            refuse           |target was removed
other     |present ||            refuse           |target was replaced
----------+--------++--------------+--------------+-------------------------------------
none      |none    ||-             |-             |not installed (or: removed and not present before)
other     |none    ||-             |-             |not installed (or: replaced and not present before)

Note:
* the backup must be removed, or the entry will be treated as removed (by the user)


== Status file

On startup, Coffle constructs the entries with their respective properties from
the status file. at_exit, Coffle collects the properties and writes the status file.

Status file: YAML. Structure:
* version
* entries=>
** entry path=>
*** {property=>value)}
* ...

Entries with no properties store nil rather than {}, it makes the YAML file
more concise.

== Alternatives

Alternatives:
* Build into org only, copy to output only on "update"; also, uninstall a
  skipped entry only on update
* Recognize missing output files (as opposed to not built) by using a
  built/built/skipped status
* Store an installed flag, so we can selectively install files ("manual skip"),
  "update" (process only the installed files) and automatically
  uninstall/reinstall on skipped status change.

